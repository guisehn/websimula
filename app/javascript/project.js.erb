<% include Rails.application.routes.url_helpers %>

import _ from 'lodash'
import ConflictChecker from './conflict-checker'
import ProjectHelp from './project-help'
import UrlUtils from './url-utils'
import consumer from './channels/consumer'

let currentProjectId = null

function updateBindings(modelName, model) {
  _.forEach(model, (value, key) => {
    // skip keys starting with _
    if (key[0] === '_') return;

    let selector = `[data-bind=${modelName}-${key.replace(/_/g, '-')}][data-model-id=${model.id}]`

    $(selector).each(function () {
      let label = model[`_${key}_label`] ? model[`_${key}_label`] : value
      let bindAttribute = $(this).data('bind-attribute')
      let currentValue = bindAttribute ? $(this).attr(bindAttribute) : $(this).text();
      let valueUsed = $(this).data('use-original-value') ? value : label
      var htmlSafe = $(this).data('html-safe')

      if (currentValue !== String(valueUsed)) {
        if (bindAttribute) {
          $(this).attr(bindAttribute, valueUsed)
        } else if (this.tagName.toLowerCase() === 'textarea') {
          $(this).val(valueUsed)
        } else if (htmlSafe) {
          $(this).html(valueUsed)
        } else {
          $(this).text(valueUsed)
        }

        $(this).hide().fadeIn(500)
      }

      if ($(this).data('editable')) {
        $(this).editable('setValue', value)
      }
    })
  })
}

function activateDescriptionField() {
  let section = $('#description-section')

  section.on('click', '[data-action=edit]', e => {
    section.find('.view-mode').hide()
    section.find('.edit-mode').show().find('textarea').focus()

    e.preventDefault()
  })

  section.on('click', '[data-action=cancel]', e => {
    section.find('.view-mode').show()
    section.find('.edit-mode').hide()

    e.preventDefault()
  })
}

function updateAgentRulesTable(data) {
  let m = window.location.pathname.match(/^\/projects\/([0-9]+)\/agents\/([0-9]+)/)

  if (m && m[2] == data.agent_id) {
    $('#agent-rules').load(`/projects/${m[1]}/agents/${data.agent_id}/rules`)
  }
}

function showProjectHelpModal(projectId, firstAccess) {
  ProjectHelp.open(projectId, firstAccess)
}

let conflictChecker = new ConflictChecker()

$(document).on('turbolinks:load', function () {
  conflictChecker.setUrl(window.location.pathname)
  conflictChecker.setCurrentUserId(window.simulaUserId)

  activateDescriptionField()

  let projectId = window.location.pathname.match(/^\/projects\/([0-9]+)/)
  projectId = projectId ? projectId[1] : null

  let changedProject = false

  if (!projectId || projectId !== currentProjectId) {
    consumer.subscriptions.subscriptions.forEach(subscription => {
      console.log('Unsubscribing from channel', subscription)
      subscription.unsubscribe()
    })

    currentProjectId = null
    changedProject = true
  }

  if (projectId) {
    currentProjectId = projectId
  }

  if (changedProject && projectId) {
    if (window.projectFirstAccess) {
      showProjectHelpModal(projectId, true)
    }

    consumer.subscriptions.create({
      channel: 'ProjectChannel',
      project_id: projectId
    }, {
      connected: () => {
        console.log(`Project ${projectId}: connected`)
      },

      rejected: () => {
        console.log(`Project ${projectId}: rejected`)
      },

      received: (data) => {
        if (data.model === 'Project') {
          let projectUrl = UrlUtils.generate(`<%= project_path(':projectId', format: 'json') %>`, { projectId })

          $.get(projectUrl, project => {
            updateBindings('project', project)

            let initialPositionsUrl = UrlUtils.generate(`<%= initial_positions_project_path(':projectId') %>`, { projectId })
            let stopConditionUrl = UrlUtils.generate(`<%= stop_condition_project_path(':projectId') %>`, { projectId })

            // TODO: refactor, make it parallel, only reload if initial position/stop condition actually changes
            $('#initial-positions-section').load(initialPositionsUrl, () => {
              $('#stop-condition-section').load(stopConditionUrl, () => {
                document.dispatchEvent(new Event('simula:reload-vue'))
              })
            })
          })
        }

        if (data.model === 'Agent') {
          let agentsUrl = UrlUtils.generate(`<%= project_agents_path(':projectId') %>`, { projectId })
          $('#agents-section').load(agentsUrl)

          let agentUrl = UrlUtils.generate(
            `<%= project_agent_path(':projectId', ':agentId', format: 'json') %>`,
            { projectId, agentId: data.id }
          )

          $.get(agentUrl, agent => updateBindings('agent', agent))
        }

        if (data.model === 'Variable') {
          let url = UrlUtils.generate(`<%= project_variables_path(':projectId') %>`, { projectId })
          $('#variables-section').load(url)
        }

        if (data.model === 'Rule') {
          updateAgentRulesTable(data)
        }

        conflictChecker.check(data)

        console.log(`Project ${projectId}: received`, data)
      }
    })
  }

  $('#project-help-link').click(function (e) {
    showProjectHelpModal(projectId, false)
    e.preventDefault()
  })
})
